(module "base64"
  (export
    `("encode" ,encode)
    `("decode" ,decode))

  (| bitwise-or)
  (<< arithmetic-shift)

  (values {#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\+ #\/ #\=})

  (decode (lambda (str)
    (if (eq? (mod (length str) 4) 0)
      (let loop ((bytes (list->vector (string->list str))) (decoded b{}))
        (if (null? bytes)
          (byte-vector->string decoded)
          (let ((b (vector (index-of values (bytes 0))
                           (index-of values (bytes 1))
                           (index-of values (bytes 2))
                           (index-of values (bytes 3)))))
            (loop (vector:subvector bytes 4 (sub1 (length bytes)))
                  (++ decoded (| (<< (b 0) 2) (<< (b 1) -4))
                              (if (< (b 2) 64) (| (<< (b 1) 4) (<< (b 2) -2)) b{})
                              (if (< (b 3) 64) (| (<< (b 2) 6) (b 3)) b{}))))))
      :err-invalid-length)))

  (encode (lambda (str)
    (let ((bytes (string->byte-vector str))
          (get-mask (lambda (pattern)
            (arithmetic-shift 255 (+ -8 (- pattern)))))
          (get-padding (lambda (pattern)
            (case pattern
              ((-6) "=")
              ((-4) "==")
              (else "")))))
      (let loop ((bytes bytes) (trail -2) (before 0) (enc ""))
        (if (null? bytes)
          (++ enc (string (values before)) (get-padding trail))
          (if (eq? trail -8)
            (loop bytes -2 0 (++ enc (values before)))
            (let* ((h (car bytes))
                   (shifted (arithmetic-shift h trail))
                   (n (+ shifted before))
                   (before (arithmetic-shift (bitwise-and h (get-mask trail)) (+ 6 trail))))
              (loop (cdr bytes) (- trail 2) before (++ enc (values n)))))))))))
